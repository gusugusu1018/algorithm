
cgh.out:     ファイル形式 elf64-x86-64


セクション .init の逆アセンブル:

0000000000400778 <_init>:
  400778:	48 83 ec 08          	sub    $0x8,%rsp
  40077c:	48 8b 05 75 18 20 00 	mov    0x201875(%rip),%rax        # 601ff8 <_DYNAMIC+0x1e0>
  400783:	48 85 c0             	test   %rax,%rax
  400786:	74 05                	je     40078d <_init+0x15>
  400788:	e8 03 01 00 00       	callq  400890 <sqrt@plt+0x10>
  40078d:	48 83 c4 08          	add    $0x8,%rsp
  400791:	c3                   	retq   

セクション .plt の逆アセンブル:

00000000004007a0 <free@plt-0x10>:
  4007a0:	ff 35 62 18 20 00    	pushq  0x201862(%rip)        # 602008 <_GLOBAL_OFFSET_TABLE_+0x8>
  4007a6:	ff 25 64 18 20 00    	jmpq   *0x201864(%rip)        # 602010 <_GLOBAL_OFFSET_TABLE_+0x10>
  4007ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004007b0 <free@plt>:
  4007b0:	ff 25 62 18 20 00    	jmpq   *0x201862(%rip)        # 602018 <_GLOBAL_OFFSET_TABLE_+0x18>
  4007b6:	68 00 00 00 00       	pushq  $0x0
  4007bb:	e9 e0 ff ff ff       	jmpq   4007a0 <_init+0x28>

00000000004007c0 <puts@plt>:
  4007c0:	ff 25 5a 18 20 00    	jmpq   *0x20185a(%rip)        # 602020 <_GLOBAL_OFFSET_TABLE_+0x20>
  4007c6:	68 01 00 00 00       	pushq  $0x1
  4007cb:	e9 d0 ff ff ff       	jmpq   4007a0 <_init+0x28>

00000000004007d0 <fread@plt>:
  4007d0:	ff 25 52 18 20 00    	jmpq   *0x201852(%rip)        # 602028 <_GLOBAL_OFFSET_TABLE_+0x28>
  4007d6:	68 02 00 00 00       	pushq  $0x2
  4007db:	e9 c0 ff ff ff       	jmpq   4007a0 <_init+0x28>

00000000004007e0 <fclose@plt>:
  4007e0:	ff 25 4a 18 20 00    	jmpq   *0x20184a(%rip)        # 602030 <_GLOBAL_OFFSET_TABLE_+0x30>
  4007e6:	68 03 00 00 00       	pushq  $0x3
  4007eb:	e9 b0 ff ff ff       	jmpq   4007a0 <_init+0x28>

00000000004007f0 <__stack_chk_fail@plt>:
  4007f0:	ff 25 42 18 20 00    	jmpq   *0x201842(%rip)        # 602038 <_GLOBAL_OFFSET_TABLE_+0x38>
  4007f6:	68 04 00 00 00       	pushq  $0x4
  4007fb:	e9 a0 ff ff ff       	jmpq   4007a0 <_init+0x28>

0000000000400800 <cos@plt>:
  400800:	ff 25 3a 18 20 00    	jmpq   *0x20183a(%rip)        # 602040 <_GLOBAL_OFFSET_TABLE_+0x40>
  400806:	68 05 00 00 00       	pushq  $0x5
  40080b:	e9 90 ff ff ff       	jmpq   4007a0 <_init+0x28>

0000000000400810 <__libc_start_main@plt>:
  400810:	ff 25 32 18 20 00    	jmpq   *0x201832(%rip)        # 602048 <_GLOBAL_OFFSET_TABLE_+0x48>
  400816:	68 06 00 00 00       	pushq  $0x6
  40081b:	e9 80 ff ff ff       	jmpq   4007a0 <_init+0x28>

0000000000400820 <calloc@plt>:
  400820:	ff 25 2a 18 20 00    	jmpq   *0x20182a(%rip)        # 602050 <_GLOBAL_OFFSET_TABLE_+0x50>
  400826:	68 07 00 00 00       	pushq  $0x7
  40082b:	e9 70 ff ff ff       	jmpq   4007a0 <_init+0x28>

0000000000400830 <malloc@plt>:
  400830:	ff 25 22 18 20 00    	jmpq   *0x201822(%rip)        # 602058 <_GLOBAL_OFFSET_TABLE_+0x58>
  400836:	68 08 00 00 00       	pushq  $0x8
  40083b:	e9 60 ff ff ff       	jmpq   4007a0 <_init+0x28>

0000000000400840 <__printf_chk@plt>:
  400840:	ff 25 1a 18 20 00    	jmpq   *0x20181a(%rip)        # 602060 <_GLOBAL_OFFSET_TABLE_+0x60>
  400846:	68 09 00 00 00       	pushq  $0x9
  40084b:	e9 50 ff ff ff       	jmpq   4007a0 <_init+0x28>

0000000000400850 <fopen@plt>:
  400850:	ff 25 12 18 20 00    	jmpq   *0x201812(%rip)        # 602068 <_GLOBAL_OFFSET_TABLE_+0x68>
  400856:	68 0a 00 00 00       	pushq  $0xa
  40085b:	e9 40 ff ff ff       	jmpq   4007a0 <_init+0x28>

0000000000400860 <getrusage@plt>:
  400860:	ff 25 0a 18 20 00    	jmpq   *0x20180a(%rip)        # 602070 <_GLOBAL_OFFSET_TABLE_+0x70>
  400866:	68 0b 00 00 00       	pushq  $0xb
  40086b:	e9 30 ff ff ff       	jmpq   4007a0 <_init+0x28>

0000000000400870 <fwrite@plt>:
  400870:	ff 25 02 18 20 00    	jmpq   *0x201802(%rip)        # 602078 <_GLOBAL_OFFSET_TABLE_+0x78>
  400876:	68 0c 00 00 00       	pushq  $0xc
  40087b:	e9 20 ff ff ff       	jmpq   4007a0 <_init+0x28>

0000000000400880 <sqrt@plt>:
  400880:	ff 25 fa 17 20 00    	jmpq   *0x2017fa(%rip)        # 602080 <_GLOBAL_OFFSET_TABLE_+0x80>
  400886:	68 0d 00 00 00       	pushq  $0xd
  40088b:	e9 10 ff ff ff       	jmpq   4007a0 <_init+0x28>

セクション .plt.got の逆アセンブル:

0000000000400890 <.plt.got>:
  400890:	ff 25 62 17 20 00    	jmpq   *0x201762(%rip)        # 601ff8 <_DYNAMIC+0x1e0>
  400896:	66 90                	xchg   %ax,%ax

セクション .text の逆アセンブル:

00000000004008a0 <main>:
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
}

int main(){
  4008a0:	55                   	push   %rbp

	for(i=0;i<256;i++){
		RGBQuad[i].rgbBlue                =i;
		RGBQuad[i].rgbGreen               =i;
		RGBQuad[i].rgbRed                 =i;
		RGBQuad[i].rgbReserved            =0;
  4008a1:	66 0f ef db          	pxor   %xmm3,%xmm3
	RGBQUAD             RGBQuad[256];

	FILE *fp;
	int i,j,k;

	BmpFileHeader.bfType                =19778;
  4008a5:	b9 42 4d 00 00       	mov    $0x4d42,%ecx
	BmpFileHeader.bfSize                =14+40+1024+(WIDTH*HEIGHT);
	BmpFileHeader.bfReserved1           =0;
  4008aa:	31 f6                	xor    %esi,%esi
	BmpFileHeader.bfReserved2           =0;
  4008ac:	31 ff                	xor    %edi,%edi
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
}

int main(){
  4008ae:	48 89 e5             	mov    %rsp,%rbp
  4008b1:	41 57                	push   %r15
  4008b3:	41 56                	push   %r14
  4008b5:	41 55                	push   %r13
  4008b7:	41 54                	push   %r12
	BmpFileHeader.bf0ffBits             =14+40+1024;

	BmpInfoHeader.biSize                =40;
	BmpInfoHeader.biWidth               =WIDTH;
	BmpInfoHeader.biHeight              =HEIGHT;
	BmpInfoHeader.biPlanes              =1;
  4008b9:	41 b8 01 00 00 00    	mov    $0x1,%r8d
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
}

int main(){
  4008bf:	53                   	push   %rbx

	BmpInfoHeader.biSize                =40;
	BmpInfoHeader.biWidth               =WIDTH;
	BmpInfoHeader.biHeight              =HEIGHT;
	BmpInfoHeader.biPlanes              =1;
	BmpInfoHeader.biBitCount            =8;     //256階調
  4008c0:	41 b9 08 00 00 00    	mov    $0x8,%r9d
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
}

int main(){
  4008c6:	48 81 ec 38 05 00 00 	sub    $0x538,%rsp
	RGBQUAD             RGBQuad[256];

	FILE *fp;
	int i,j,k;

	BmpFileHeader.bfType                =19778;
  4008cd:	66 89 8d f0 fa ff ff 	mov    %cx,-0x510(%rbp)
	BmpFileHeader.bfSize                =14+40+1024+(WIDTH*HEIGHT);
  4008d4:	c7 85 f2 fa ff ff 36 	movl   $0x1fa836,-0x50e(%rbp)
  4008db:	a8 1f 00 
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
}

int main(){
  4008de:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4008e5:	00 00 
  4008e7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4008eb:	31 c0                	xor    %eax,%eax
  4008ed:	48 8d 85 c0 fb ff ff 	lea    -0x440(%rbp),%rax
	BmpInfoHeader.biCompression         =0L;
	BmpInfoHeader.biSizeImage           =0L;
	BmpInfoHeader.biXPelsPerMeter       =0L;
	BmpInfoHeader.biYPelsPerMeter       =0L;
	BmpInfoHeader.biCirUsed             =0L;
	BmpInfoHeader.biCirImportant        =0L;
  4008f4:	66 0f 6f 15 d4 08 00 	movdqa 0x8d4(%rip),%xmm2        # 4011d0 <_IO_stdin_used+0x90>
  4008fb:	00 
	FILE *fp;
	int i,j,k;

	BmpFileHeader.bfType                =19778;
	BmpFileHeader.bfSize                =14+40+1024+(WIDTH*HEIGHT);
	BmpFileHeader.bfReserved1           =0;
  4008fc:	66 89 b5 f6 fa ff ff 	mov    %si,-0x50a(%rbp)
	BmpFileHeader.bfReserved2           =0;
  400903:	66 89 bd f8 fa ff ff 	mov    %di,-0x508(%rbp)
  40090a:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
  400911:	66 44 0f 6f 05 c6 08 	movdqa 0x8c6(%rip),%xmm8        # 4011e0 <_IO_stdin_used+0xa0>
  400918:	00 00 
	BmpFileHeader.bf0ffBits             =14+40+1024;
  40091a:	c7 85 fa fa ff ff 36 	movl   $0x436,-0x506(%rbp)
  400921:	04 00 00 

	BmpInfoHeader.biSize                =40;
  400924:	c7 85 00 fb ff ff 28 	movl   $0x28,-0x500(%rbp)
  40092b:	00 00 00 
  40092e:	66 0f 6f 3d ba 08 00 	movdqa 0x8ba(%rip),%xmm7        # 4011f0 <_IO_stdin_used+0xb0>
  400935:	00 
	BmpInfoHeader.biWidth               =WIDTH;
  400936:	c7 85 04 fb ff ff 80 	movl   $0x780,-0x4fc(%rbp)
  40093d:	07 00 00 
	BmpInfoHeader.biHeight              =HEIGHT;
  400940:	c7 85 08 fb ff ff 38 	movl   $0x438,-0x4f8(%rbp)
  400947:	04 00 00 
  40094a:	66 0f 6f 35 ae 08 00 	movdqa 0x8ae(%rip),%xmm6        # 401200 <_IO_stdin_used+0xc0>
  400951:	00 
	BmpInfoHeader.biPlanes              =1;
  400952:	66 44 89 85 0c fb ff 	mov    %r8w,-0x4f4(%rbp)
  400959:	ff 
	BmpInfoHeader.biBitCount            =8;     //256階調
  40095a:	66 44 89 8d 0e fb ff 	mov    %r9w,-0x4f2(%rbp)
  400961:	ff 
  400962:	66 0f 6f 2d a6 08 00 	movdqa 0x8a6(%rip),%xmm5        # 401210 <_IO_stdin_used+0xd0>
  400969:	00 
	BmpInfoHeader.biCompression         =0L;
  40096a:	c7 85 10 fb ff ff 00 	movl   $0x0,-0x4f0(%rbp)
  400971:	00 00 00 
	BmpInfoHeader.biSizeImage           =0L;
  400974:	c7 85 14 fb ff ff 00 	movl   $0x0,-0x4ec(%rbp)
  40097b:	00 00 00 
  40097e:	66 0f 6f 25 9a 08 00 	movdqa 0x89a(%rip),%xmm4        # 401220 <_IO_stdin_used+0xe0>
  400985:	00 
	BmpInfoHeader.biXPelsPerMeter       =0L;
  400986:	c7 85 18 fb ff ff 00 	movl   $0x0,-0x4e8(%rbp)
  40098d:	00 00 00 
	BmpInfoHeader.biYPelsPerMeter       =0L;
  400990:	c7 85 1c fb ff ff 00 	movl   $0x0,-0x4e4(%rbp)
  400997:	00 00 00 
	BmpInfoHeader.biCirUsed             =0L;
  40099a:	c7 85 20 fb ff ff 00 	movl   $0x0,-0x4e0(%rbp)
  4009a1:	00 00 00 
	BmpInfoHeader.biCirImportant        =0L;
  4009a4:	c7 85 24 fb ff ff 00 	movl   $0x0,-0x4dc(%rbp)
  4009ab:	00 00 00 

	for(i=0;i<256;i++){
		RGBQuad[i].rgbBlue                =i;
  4009ae:	66 0f 6f c2          	movdqa %xmm2,%xmm0
  4009b2:	66 44 0f 6f e2       	movdqa %xmm2,%xmm12
  4009b7:	66 0f 6f ca          	movdqa %xmm2,%xmm1
  4009bb:	48 83 c0 40          	add    $0x40,%rax
  4009bf:	66 0f fe c7          	paddd  %xmm7,%xmm0
  4009c3:	66 44 0f 61 e0       	punpcklwd %xmm0,%xmm12
  4009c8:	66 0f 69 c8          	punpckhwd %xmm0,%xmm1
  4009cc:	66 44 0f 6f d2       	movdqa %xmm2,%xmm10
  4009d1:	66 41 0f 6f c4       	movdqa %xmm12,%xmm0
  4009d6:	66 44 0f fe d5       	paddd  %xmm5,%xmm10
  4009db:	66 45 0f 6f cc       	movdqa %xmm12,%xmm9
  4009e0:	66 0f 61 c1          	punpcklwd %xmm1,%xmm0
  4009e4:	66 44 0f 69 c9       	punpckhwd %xmm1,%xmm9
  4009e9:	66 0f 6f ca          	movdqa %xmm2,%xmm1
  4009ed:	66 41 0f fe d0       	paddd  %xmm8,%xmm2
  4009f2:	66 0f fe ce          	paddd  %xmm6,%xmm1
  4009f6:	66 41 0f 61 c1       	punpcklwd %xmm9,%xmm0
  4009fb:	66 44 0f 6f c9       	movdqa %xmm1,%xmm9
  400a00:	66 41 0f 61 ca       	punpcklwd %xmm10,%xmm1
  400a05:	66 45 0f 69 ca       	punpckhwd %xmm10,%xmm9
  400a0a:	66 44 0f 6f d1       	movdqa %xmm1,%xmm10
  400a0f:	66 0f db c4          	pand   %xmm4,%xmm0
  400a13:	66 45 0f 69 d1       	punpckhwd %xmm9,%xmm10
  400a18:	66 41 0f 61 c9       	punpcklwd %xmm9,%xmm1
  400a1d:	66 41 0f 61 ca       	punpcklwd %xmm10,%xmm1
  400a22:	66 0f db cc          	pand   %xmm4,%xmm1
  400a26:	66 0f 67 c1          	packuswb %xmm1,%xmm0
		RGBQuad[i].rgbGreen               =i;
		RGBQuad[i].rgbRed                 =i;
		RGBQuad[i].rgbReserved            =0;
  400a2a:	66 44 0f 6f c8       	movdqa %xmm0,%xmm9
  400a2f:	66 44 0f 6f d0       	movdqa %xmm0,%xmm10
  400a34:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  400a38:	66 44 0f 60 c8       	punpcklbw %xmm0,%xmm9
  400a3d:	66 44 0f 60 d3       	punpcklbw %xmm3,%xmm10
  400a42:	66 0f 68 c8          	punpckhbw %xmm0,%xmm1
  400a46:	66 45 0f 6f d9       	movdqa %xmm9,%xmm11
  400a4b:	66 0f 68 c3          	punpckhbw %xmm3,%xmm0
  400a4f:	66 45 0f 68 ca       	punpckhbw %xmm10,%xmm9
  400a54:	66 45 0f 60 da       	punpcklbw %xmm10,%xmm11
  400a59:	44 0f 29 48 d0       	movaps %xmm9,-0x30(%rax)
  400a5e:	66 44 0f 6f c9       	movdqa %xmm1,%xmm9
  400a63:	66 0f 68 c8          	punpckhbw %xmm0,%xmm1
  400a67:	66 44 0f 60 c8       	punpcklbw %xmm0,%xmm9
  400a6c:	44 0f 29 58 c0       	movaps %xmm11,-0x40(%rax)
  400a71:	44 0f 29 48 e0       	movaps %xmm9,-0x20(%rax)
  400a76:	0f 29 48 f0          	movaps %xmm1,-0x10(%rax)
  400a7a:	48 39 c2             	cmp    %rax,%rdx
  400a7d:	0f 85 2b ff ff ff    	jne    4009ae <main+0x10e>
	}

	fp=fopen("../../../data/ten1.3d","rb");
  400a83:	be 44 11 40 00       	mov    $0x401144,%esi
  400a88:	bf 47 11 40 00       	mov    $0x401147,%edi
  400a8d:	e8 be fd ff ff       	callq  400850 <fopen@plt>
	if(fp==NULL){
  400a92:	48 85 c0             	test   %rax,%rax
		RGBQuad[i].rgbGreen               =i;
		RGBQuad[i].rgbRed                 =i;
		RGBQuad[i].rgbReserved            =0;
	}

	fp=fopen("../../../data/ten1.3d","rb");
  400a95:	48 89 c3             	mov    %rax,%rbx
	if(fp==NULL){
  400a98:	75 0a                	jne    400aa4 <main+0x204>
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  400a9a:	bf 5d 11 40 00       	mov    $0x40115d,%edi
  400a9f:	e8 1c fd ff ff       	callq  4007c0 <puts@plt>
	return __fread_chk (__ptr, __bos0 (__ptr), __size, __n, __stream);

      if (__size * __n > __bos0 (__ptr))
	return __fread_chk_warn (__ptr, __bos0 (__ptr), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
  400aa4:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  400aab:	ba 01 00 00 00       	mov    $0x1,%edx
  400ab0:	48 89 d9             	mov    %rbx,%rcx
  400ab3:	be 04 00 00 00       	mov    $0x4,%esi
	int y[points];
	float z[points];

	int x_buf,y_buf,z_buf;

	for(i=0;i<points;i++){
  400ab8:	45 31 e4             	xor    %r12d,%r12d
  400abb:	e8 10 fd ff ff       	callq  4007d0 <fread@plt>
		printf("Can't open file\n");
	}

	fread(&points,sizeof(int),1,fp);

	int x[points];
  400ac0:	48 63 85 e0 fa ff ff 	movslq -0x520(%rbp),%rax
  400ac7:	48 89 c2             	mov    %rax,%rdx
  400aca:	48 8d 04 85 12 00 00 	lea    0x12(,%rax,4),%rax
  400ad1:	00 
  400ad2:	48 c1 e8 04          	shr    $0x4,%rax
  400ad6:	48 c1 e0 04          	shl    $0x4,%rax
  400ada:	48 29 c4             	sub    %rax,%rsp
  400add:	48 89 a5 c8 fa ff ff 	mov    %rsp,-0x538(%rbp)
	int y[points];
  400ae4:	48 29 c4             	sub    %rax,%rsp
  400ae7:	48 89 a5 c0 fa ff ff 	mov    %rsp,-0x540(%rbp)
	float z[points];
  400aee:	48 29 c4             	sub    %rax,%rsp

	int x_buf,y_buf,z_buf;

	for(i=0;i<points;i++){
  400af1:	85 d2                	test   %edx,%edx

	fread(&points,sizeof(int),1,fp);

	int x[points];
	int y[points];
	float z[points];
  400af3:	49 89 e7             	mov    %rsp,%r15

	int x_buf,y_buf,z_buf;

	for(i=0;i<points;i++){
  400af6:	0f 8e b5 00 00 00    	jle    400bb1 <main+0x311>
  400afc:	48 8d bd e4 fa ff ff 	lea    -0x51c(%rbp),%rdi
  400b03:	48 89 d9             	mov    %rbx,%rcx
  400b06:	ba 01 00 00 00       	mov    $0x1,%edx
  400b0b:	be 04 00 00 00       	mov    $0x4,%esi
  400b10:	e8 bb fc ff ff       	callq  4007d0 <fread@plt>
  400b15:	48 8d bd e8 fa ff ff 	lea    -0x518(%rbp),%rdi
  400b1c:	48 89 d9             	mov    %rbx,%rcx
  400b1f:	ba 01 00 00 00       	mov    $0x1,%edx
  400b24:	be 04 00 00 00       	mov    $0x4,%esi
  400b29:	e8 a2 fc ff ff       	callq  4007d0 <fread@plt>
  400b2e:	48 8d bd ec fa ff ff 	lea    -0x514(%rbp),%rdi
  400b35:	ba 01 00 00 00       	mov    $0x1,%edx
  400b3a:	48 89 d9             	mov    %rbx,%rcx
  400b3d:	be 04 00 00 00       	mov    $0x4,%esi
  400b42:	e8 89 fc ff ff       	callq  4007d0 <fread@plt>
		fread(&y_buf,sizeof(int),1,fp);
		fread(&z_buf,sizeof(int),1,fp);

		x[i]=x_buf*40+960;
		y[i]=y_buf*40+540;
		z[i]=((float)z_buf)*40+100000.0;
  400b47:	66 0f ef c0          	pxor   %xmm0,%xmm0
	for(i=0;i<points;i++){
		fread(&x_buf,sizeof(int),1,fp);
		fread(&y_buf,sizeof(int),1,fp);
		fread(&z_buf,sizeof(int),1,fp);

		x[i]=x_buf*40+960;
  400b4b:	8b 95 e4 fa ff ff    	mov    -0x51c(%rbp),%edx
  400b51:	48 8b bd c8 fa ff ff 	mov    -0x538(%rbp),%rdi
  400b58:	49 63 c4             	movslq %r12d,%rax
	int y[points];
	float z[points];

	int x_buf,y_buf,z_buf;

	for(i=0;i<points;i++){
  400b5b:	41 83 c4 01          	add    $0x1,%r12d
  400b5f:	44 39 a5 e0 fa ff ff 	cmp    %r12d,-0x520(%rbp)
		fread(&y_buf,sizeof(int),1,fp);
		fread(&z_buf,sizeof(int),1,fp);

		x[i]=x_buf*40+960;
		y[i]=y_buf*40+540;
		z[i]=((float)z_buf)*40+100000.0;
  400b66:	f3 0f 2a 85 ec fa ff 	cvtsi2ssl -0x514(%rbp),%xmm0
  400b6d:	ff 
	for(i=0;i<points;i++){
		fread(&x_buf,sizeof(int),1,fp);
		fread(&y_buf,sizeof(int),1,fp);
		fread(&z_buf,sizeof(int),1,fp);

		x[i]=x_buf*40+960;
  400b6e:	8d 14 92             	lea    (%rdx,%rdx,4),%edx
  400b71:	8d 14 d5 c0 03 00 00 	lea    0x3c0(,%rdx,8),%edx
  400b78:	89 14 87             	mov    %edx,(%rdi,%rax,4)
		y[i]=y_buf*40+540;
  400b7b:	8b 95 e8 fa ff ff    	mov    -0x518(%rbp),%edx
  400b81:	48 8b bd c0 fa ff ff 	mov    -0x540(%rbp),%rdi
  400b88:	8d 14 92             	lea    (%rdx,%rdx,4),%edx
  400b8b:	8d 14 d5 1c 02 00 00 	lea    0x21c(,%rdx,8),%edx
		z[i]=((float)z_buf)*40+100000.0;
  400b92:	f3 0f 59 05 96 06 00 	mulss  0x696(%rip),%xmm0        # 401230 <_IO_stdin_used+0xf0>
  400b99:	00 
		fread(&x_buf,sizeof(int),1,fp);
		fread(&y_buf,sizeof(int),1,fp);
		fread(&z_buf,sizeof(int),1,fp);

		x[i]=x_buf*40+960;
		y[i]=y_buf*40+540;
  400b9a:	89 14 87             	mov    %edx,(%rdi,%rax,4)
		z[i]=((float)z_buf)*40+100000.0;
  400b9d:	f3 0f 58 05 8f 06 00 	addss  0x68f(%rip),%xmm0        # 401234 <_IO_stdin_used+0xf4>
  400ba4:	00 
  400ba5:	f3 41 0f 11 04 87    	movss  %xmm0,(%r15,%rax,4)
	int y[points];
	float z[points];

	int x_buf,y_buf,z_buf;

	for(i=0;i<points;i++){
  400bab:	0f 8f 4b ff ff ff    	jg     400afc <main+0x25c>

		x[i]=x_buf*40+960;
		y[i]=y_buf*40+540;
		z[i]=((float)z_buf)*40+100000.0;
	}
	fclose(fp);
  400bb1:	48 89 df             	mov    %rbx,%rdi
	lambda=0.633f;
	intarval=10.5f;
	sum=2.0f*M_PI*intarval/lambda;

	starttime1 = getrusage_sec();
	for(i=0;i<HEIGHT;i++){
  400bb4:	45 31 e4             	xor    %r12d,%r12d

		x[i]=x_buf*40+960;
		y[i]=y_buf*40+540;
		z[i]=((float)z_buf)*40+100000.0;
	}
	fclose(fp);
  400bb7:	e8 24 fc ff ff       	callq  4007e0 <fclose@plt>
	   }
	 */

	float *img_buf;

	img_buf=(float *)malloc(sizeof(float)*WIDTH*HEIGHT);
  400bbc:	be 01 00 00 00       	mov    $0x1,%esi
  400bc1:	bf 00 90 7e 00       	mov    $0x7e9000,%edi
  400bc6:	e8 55 fc ff ff       	callq  400820 <calloc@plt>
float getrusage_sec()
{
	struct rusage t;
	struct timeval tv;

	getrusage(RUSAGE_SELF,&t);
  400bcb:	48 8d b5 30 fb ff ff 	lea    -0x4d0(%rbp),%rsi
  400bd2:	31 ff                	xor    %edi,%edi
	   }
	 */

	float *img_buf;

	img_buf=(float *)malloc(sizeof(float)*WIDTH*HEIGHT);
  400bd4:	48 89 85 b0 fa ff ff 	mov    %rax,-0x550(%rbp)
float getrusage_sec()
{
	struct rusage t;
	struct timeval tv;

	getrusage(RUSAGE_SELF,&t);
  400bdb:	e8 80 fc ff ff       	callq  400860 <getrusage@plt>
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
  400be0:	66 0f ef c0          	pxor   %xmm0,%xmm0
  400be4:	8b 85 e0 fa ff ff    	mov    -0x520(%rbp),%eax
  400bea:	66 0f ef c9          	pxor   %xmm1,%xmm1
  400bee:	66 0f ef db          	pxor   %xmm3,%xmm3
  400bf2:	f3 48 0f 2a 85 38 fb 	cvtsi2ssq -0x4c8(%rbp),%xmm0
  400bf9:	ff ff 
  400bfb:	89 85 d4 fa ff ff    	mov    %eax,-0x52c(%rbp)
  400c01:	f2 48 0f 2a 8d 30 fb 	cvtsi2sdq -0x4d0(%rbp),%xmm1
  400c08:	ff ff 
  400c0a:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  400c0e:	f2 0f 59 05 aa 05 00 	mulsd  0x5aa(%rip),%xmm0        # 4011c0 <_IO_stdin_used+0x80>
  400c15:	00 
  400c16:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  400c1a:	f2 0f 5a d8          	cvtsd2ss %xmm0,%xmm3
  400c1e:	f3 0f 11 9d ac fa ff 	movss  %xmm3,-0x554(%rbp)
  400c25:	ff 
  400c26:	41 69 c4 80 07 00 00 	imul   $0x780,%r12d,%eax
	sum=2.0f*M_PI*intarval/lambda;

	starttime1 = getrusage_sec();
	for(i=0;i<HEIGHT;i++){
		for(j=0;j<WIDTH;j++){
			for(k=0;k<points;k++){
  400c2d:	48 c7 85 b8 fa ff ff 	movq   $0x0,-0x548(%rbp)
  400c34:	00 00 00 00 
  400c38:	89 85 d0 fa ff ff    	mov    %eax,-0x530(%rbp)
  400c3e:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  400c45:	0f 1f 00             	nopl   (%rax)
  400c48:	8b 95 d4 fa ff ff    	mov    -0x52c(%rbp),%edx
  400c4e:	89 c3                	mov    %eax,%ebx
  400c50:	85 d2                	test   %edx,%edx
  400c52:	0f 8e a8 00 00 00    	jle    400d00 <main+0x460>
  400c58:	8b bd d0 fa ff ff    	mov    -0x530(%rbp),%edi
  400c5e:	45 31 ed             	xor    %r13d,%r13d
  400c61:	01 f8                	add    %edi,%eax
  400c63:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
  400c6a:	4c 8d 34 87          	lea    (%rdi,%rax,4),%r14
  400c6e:	66 90                	xchg   %ax,%ax
          			img_buf[i*WIDTH+j]=img_buf[i*WIDTH+j]+cos(sum*sqrt((j-x[k])*(j-x[k])+(i-y[k])*(i-y[k])+z[k]*z[k]));
  400c70:	48 8b 85 c8 fa ff ff 	mov    -0x538(%rbp),%rax
  400c77:	48 8b 8d c0 fa ff ff 	mov    -0x540(%rbp),%rcx
  400c7e:	49 63 f5             	movslq %r13d,%rsi
  400c81:	89 da                	mov    %ebx,%edx
  400c83:	66 0f ef c0          	pxor   %xmm0,%xmm0
  400c87:	f3 41 0f 10 0c b7    	movss  (%r15,%rsi,4),%xmm1
  400c8d:	2b 14 b0             	sub    (%rax,%rsi,4),%edx
  400c90:	44 89 e0             	mov    %r12d,%eax
  400c93:	2b 04 b1             	sub    (%rcx,%rsi,4),%eax
  400c96:	f3 0f 59 c9          	mulss  %xmm1,%xmm1
  400c9a:	66 0f ef ed          	pxor   %xmm5,%xmm5
  400c9e:	0f af d2             	imul   %edx,%edx
  400ca1:	0f af c0             	imul   %eax,%eax
  400ca4:	f3 41 0f 5a 2e       	cvtss2sd (%r14),%xmm5
  400ca9:	f2 0f 11 ad d8 fa ff 	movsd  %xmm5,-0x528(%rbp)
  400cb0:	ff 
  400cb1:	01 d0                	add    %edx,%eax
  400cb3:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  400cb7:	f3 0f 58 c8          	addss  %xmm0,%xmm1
  400cbb:	f3 0f 5a c9          	cvtss2sd %xmm1,%xmm1
  400cbf:	f2 0f 51 c1          	sqrtsd %xmm1,%xmm0
  400cc3:	66 0f 2e c0          	ucomisd %xmm0,%xmm0
  400cc7:	0f 8a 5b 02 00 00    	jp     400f28 <main+0x688>
  400ccd:	f2 0f 59 05 f3 04 00 	mulsd  0x4f3(%rip),%xmm0        # 4011c8 <_IO_stdin_used+0x88>
  400cd4:	00 
	sum=2.0f*M_PI*intarval/lambda;

	starttime1 = getrusage_sec();
	for(i=0;i<HEIGHT;i++){
		for(j=0;j<WIDTH;j++){
			for(k=0;k<points;k++){
  400cd5:	41 83 c5 01          	add    $0x1,%r13d
          			img_buf[i*WIDTH+j]=img_buf[i*WIDTH+j]+cos(sum*sqrt((j-x[k])*(j-x[k])+(i-y[k])*(i-y[k])+z[k]*z[k]));
  400cd9:	e8 22 fb ff ff       	callq  400800 <cos@plt>
  400cde:	f2 0f 58 85 d8 fa ff 	addsd  -0x528(%rbp),%xmm0
  400ce5:	ff 
  400ce6:	66 0f ef ff          	pxor   %xmm7,%xmm7
	sum=2.0f*M_PI*intarval/lambda;

	starttime1 = getrusage_sec();
	for(i=0;i<HEIGHT;i++){
		for(j=0;j<WIDTH;j++){
			for(k=0;k<points;k++){
  400cea:	44 39 ad d4 fa ff ff 	cmp    %r13d,-0x52c(%rbp)
          			img_buf[i*WIDTH+j]=img_buf[i*WIDTH+j]+cos(sum*sqrt((j-x[k])*(j-x[k])+(i-y[k])*(i-y[k])+z[k]*z[k]));
  400cf1:	f2 0f 5a f8          	cvtsd2ss %xmm0,%xmm7
  400cf5:	f3 41 0f 11 3e       	movss  %xmm7,(%r14)
	sum=2.0f*M_PI*intarval/lambda;

	starttime1 = getrusage_sec();
	for(i=0;i<HEIGHT;i++){
		for(j=0;j<WIDTH;j++){
			for(k=0;k<points;k++){
  400cfa:	0f 8f 70 ff ff ff    	jg     400c70 <main+0x3d0>
  400d00:	48 83 85 b8 fa ff ff 	addq   $0x1,-0x548(%rbp)
  400d07:	01 
  400d08:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
	intarval=10.5f;
	sum=2.0f*M_PI*intarval/lambda;

	starttime1 = getrusage_sec();
	for(i=0;i<HEIGHT;i++){
		for(j=0;j<WIDTH;j++){
  400d0f:	48 3d 80 07 00 00    	cmp    $0x780,%rax
  400d15:	0f 85 2d ff ff ff    	jne    400c48 <main+0x3a8>
	lambda=0.633f;
	intarval=10.5f;
	sum=2.0f*M_PI*intarval/lambda;

	starttime1 = getrusage_sec();
	for(i=0;i<HEIGHT;i++){
  400d1b:	41 83 c4 01          	add    $0x1,%r12d
  400d1f:	41 81 fc 38 04 00 00 	cmp    $0x438,%r12d
  400d26:	0f 85 fa fe ff ff    	jne    400c26 <main+0x386>
float getrusage_sec()
{
	struct rusage t;
	struct timeval tv;

	getrusage(RUSAGE_SELF,&t);
  400d2c:	48 8d b5 30 fb ff ff 	lea    -0x4d0(%rbp),%rsi
  400d33:	31 ff                	xor    %edi,%edi
  400d35:	e8 26 fb ff ff       	callq  400860 <getrusage@plt>
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
  400d3a:	66 0f ef c0          	pxor   %xmm0,%xmm0
	}
	endtime1 = getrusage_sec();

	float min,max,mid;

	min=img_buf[0];
  400d3e:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
	struct timeval tv;

	getrusage(RUSAGE_SELF,&t);
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
  400d45:	66 0f ef c9          	pxor   %xmm1,%xmm1
  400d49:	66 0f ef db          	pxor   %xmm3,%xmm3
  400d4d:	f3 48 0f 2a 85 38 fb 	cvtsi2ssq -0x4c8(%rbp),%xmm0
  400d54:	ff ff 
  400d56:	48 8d 8f 00 90 7e 00 	lea    0x7e9000(%rdi),%rcx
	}
	endtime1 = getrusage_sec();

	float min,max,mid;

	min=img_buf[0];
  400d5d:	48 89 f8             	mov    %rdi,%rax
	struct timeval tv;

	getrusage(RUSAGE_SELF,&t);
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
  400d60:	f2 48 0f 2a 8d 30 fb 	cvtsi2sdq -0x4d0(%rbp),%xmm1
  400d67:	ff ff 
	}
	endtime1 = getrusage_sec();

	float min,max,mid;

	min=img_buf[0];
  400d69:	f3 0f 10 17          	movss  (%rdi),%xmm2
	struct timeval tv;

	getrusage(RUSAGE_SELF,&t);
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
  400d6d:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  400d71:	f2 0f 59 05 47 04 00 	mulsd  0x447(%rip),%xmm0        # 4011c0 <_IO_stdin_used+0x80>
  400d78:	00 
  400d79:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
	endtime1 = getrusage_sec();

	float min,max,mid;

	min=img_buf[0];
	max=img_buf[0];
  400d7d:	0f 28 ca             	movaps %xmm2,%xmm1
	struct timeval tv;

	getrusage(RUSAGE_SELF,&t);
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
  400d80:	f2 0f 5a d8          	cvtsd2ss %xmm0,%xmm3
  400d84:	f3 0f 11 9d d8 fa ff 	movss  %xmm3,-0x528(%rbp)
  400d8b:	ff 
  400d8c:	48 8d 90 00 1e 00 00 	lea    0x1e00(%rax),%rdx
  400d93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	min=img_buf[0];
	max=img_buf[0];

	for(i=0;i<HEIGHT;i++){
		for(j=0;j<WIDTH;j++){
			if(min>img_buf[i*WIDTH+j]){
  400d98:	f3 0f 10 00          	movss  (%rax),%xmm0
  400d9c:	48 83 c0 04          	add    $0x4,%rax
  400da0:	0f 28 e0             	movaps %xmm0,%xmm4

	min=img_buf[0];
	max=img_buf[0];

	for(i=0;i<HEIGHT;i++){
		for(j=0;j<WIDTH;j++){
  400da3:	48 39 c2             	cmp    %rax,%rdx
  400da6:	f3 0f 5f c1          	maxss  %xmm1,%xmm0
  400daa:	f3 0f 5d e2          	minss  %xmm2,%xmm4
  400dae:	0f 28 c8             	movaps %xmm0,%xmm1
  400db1:	0f 28 d4             	movaps %xmm4,%xmm2
  400db4:	75 e2                	jne    400d98 <main+0x4f8>
	float min,max,mid;

	min=img_buf[0];
	max=img_buf[0];

	for(i=0;i<HEIGHT;i++){
  400db6:	48 39 d1             	cmp    %rdx,%rcx
  400db9:	48 89 d0             	mov    %rdx,%rax
  400dbc:	75 ce                	jne    400d8c <main+0x4ec>
				max=img_buf[i*WIDTH+j];
			}
		}
	}

	mid=0.5f*(min+max);
  400dbe:	0f 28 dc             	movaps %xmm4,%xmm3
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  400dc1:	f3 0f 5a c9          	cvtss2sd %xmm1,%xmm1
  400dc5:	be 98 11 40 00       	mov    $0x401198,%esi
  400dca:	bf 01 00 00 00       	mov    $0x1,%edi
  400dcf:	b8 03 00 00 00       	mov    $0x3,%eax
  400dd4:	f3 0f 58 d8          	addss  %xmm0,%xmm3
  400dd8:	66 0f ef c0          	pxor   %xmm0,%xmm0
  400ddc:	f3 0f 5a c2          	cvtss2sd %xmm2,%xmm0
  400de0:	66 0f ef d2          	pxor   %xmm2,%xmm2
  400de4:	f3 0f 59 1d 4c 04 00 	mulss  0x44c(%rip),%xmm3        # 401238 <_IO_stdin_used+0xf8>
  400deb:	00 
  400dec:	f3 0f 5a d3          	cvtss2sd %xmm3,%xmm2
  400df0:	f3 0f 11 9d d4 fa ff 	movss  %xmm3,-0x52c(%rbp)
  400df7:	ff 
  400df8:	e8 43 fa ff ff       	callq  400840 <__printf_chk@plt>

	printf("min = %lf  max = %lf  mid = %lf\n",min,max,mid);


	unsigned char *img;
	img=(unsigned char *)malloc(sizeof(unsigned char)*WIDTH*HEIGHT);
  400dfd:	bf 00 a4 1f 00       	mov    $0x1fa400,%edi
  400e02:	e8 29 fa ff ff       	callq  400830 <malloc@plt>
  400e07:	f3 0f 10 9d d4 fa ff 	movss  -0x52c(%rbp),%xmm3
  400e0e:	ff 
  400e0f:	49 89 c4             	mov    %rax,%r12
  400e12:	31 c0                	xor    %eax,%eax

	for(i=0;i<WIDTH*HEIGHT;i++){
		if(img_buf[i]<mid){
  400e14:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
  400e1b:	f3 0f 10 04 87       	movss  (%rdi,%rax,4),%xmm0
  400e20:	0f 2e d8             	ucomiss %xmm0,%xmm3
  400e23:	76 05                	jbe    400e2a <main+0x58a>
			img[i]=0;
  400e25:	41 c6 04 04 00       	movb   $0x0,(%r12,%rax,1)
		}
		if(img_buf[i]>mid){
  400e2a:	0f 2e c3             	ucomiss %xmm3,%xmm0
  400e2d:	76 05                	jbe    400e34 <main+0x594>
			img[i]=255;
  400e2f:	41 c6 04 04 ff       	movb   $0xff,(%r12,%rax,1)
  400e34:	48 83 c0 01          	add    $0x1,%rax


	unsigned char *img;
	img=(unsigned char *)malloc(sizeof(unsigned char)*WIDTH*HEIGHT);

	for(i=0;i<WIDTH*HEIGHT;i++){
  400e38:	48 3d 00 a4 1f 00    	cmp    $0x1fa400,%rax
  400e3e:	75 d4                	jne    400e14 <main+0x574>
			img[i]=255;
		}
	}

	FILE *fp1;
	fp1=fopen("cgh.bmp","wb");
  400e40:	be 6d 11 40 00       	mov    $0x40116d,%esi
  400e45:	bf 70 11 40 00       	mov    $0x401170,%edi
  400e4a:	e8 01 fa ff ff       	callq  400850 <fopen@plt>
	if(fp1==NULL){
  400e4f:	48 85 c0             	test   %rax,%rax
			img[i]=255;
		}
	}

	FILE *fp1;
	fp1=fopen("cgh.bmp","wb");
  400e52:	48 89 c3             	mov    %rax,%rbx
	if(fp1==NULL){
  400e55:	75 0a                	jne    400e61 <main+0x5c1>
  400e57:	bf 5d 11 40 00       	mov    $0x40115d,%edi
  400e5c:	e8 5f f9 ff ff       	callq  4007c0 <puts@plt>
		printf("Can't open file\n");
	}

	fwrite(&BmpFileHeader, sizeof(BmpFileHeader) , 1 ,fp1);
  400e61:	48 8d bd f0 fa ff ff 	lea    -0x510(%rbp),%rdi
  400e68:	48 89 d9             	mov    %rbx,%rcx
  400e6b:	ba 01 00 00 00       	mov    $0x1,%edx
  400e70:	be 0e 00 00 00       	mov    $0xe,%esi
  400e75:	e8 f6 f9 ff ff       	callq  400870 <fwrite@plt>
	fwrite(&BmpInfoHeader, sizeof(BmpInfoHeader) , 1 ,fp1);
  400e7a:	48 8d bd 00 fb ff ff 	lea    -0x500(%rbp),%rdi
  400e81:	48 89 d9             	mov    %rbx,%rcx
  400e84:	ba 01 00 00 00       	mov    $0x1,%edx
  400e89:	be 28 00 00 00       	mov    $0x28,%esi
  400e8e:	e8 dd f9 ff ff       	callq  400870 <fwrite@plt>
	fwrite(&RGBQuad[0], sizeof(RGBQuad[0]) , 256 ,fp1);
  400e93:	48 8d bd c0 fb ff ff 	lea    -0x440(%rbp),%rdi
  400e9a:	48 89 d9             	mov    %rbx,%rcx
  400e9d:	ba 00 01 00 00       	mov    $0x100,%edx
  400ea2:	be 04 00 00 00       	mov    $0x4,%esi
  400ea7:	e8 c4 f9 ff ff       	callq  400870 <fwrite@plt>
	fwrite(img,sizeof(unsigned char),WIDTH*HEIGHT,fp1);
  400eac:	48 89 d9             	mov    %rbx,%rcx
  400eaf:	ba 00 a4 1f 00       	mov    $0x1fa400,%edx
  400eb4:	be 01 00 00 00       	mov    $0x1,%esi
  400eb9:	4c 89 e7             	mov    %r12,%rdi
  400ebc:	e8 af f9 ff ff       	callq  400870 <fwrite@plt>
  400ec1:	f3 0f 10 85 d8 fa ff 	movss  -0x528(%rbp),%xmm0
  400ec8:	ff 
  400ec9:	be 78 11 40 00       	mov    $0x401178,%esi
  400ece:	f3 0f 5c 85 ac fa ff 	subss  -0x554(%rbp),%xmm0
  400ed5:	ff 
  400ed6:	bf 01 00 00 00       	mov    $0x1,%edi
  400edb:	b8 01 00 00 00       	mov    $0x1,%eax
  400ee0:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  400ee4:	e8 57 f9 ff ff       	callq  400840 <__printf_chk@plt>

	printf("Calculation time is %lf\n",endtime1-starttime1);

	free(img);
  400ee9:	4c 89 e7             	mov    %r12,%rdi
  400eec:	e8 bf f8 ff ff       	callq  4007b0 <free@plt>
	free(img_buf);
  400ef1:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
  400ef8:	e8 b3 f8 ff ff       	callq  4007b0 <free@plt>
	fclose(fp1);
  400efd:	48 89 df             	mov    %rbx,%rdi
  400f00:	e8 db f8 ff ff       	callq  4007e0 <fclose@plt>

	return 0;
}
  400f05:	31 c0                	xor    %eax,%eax
  400f07:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  400f0b:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
  400f12:	00 00 
  400f14:	75 2c                	jne    400f42 <main+0x6a2>
  400f16:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  400f1a:	5b                   	pop    %rbx
  400f1b:	41 5c                	pop    %r12
  400f1d:	41 5d                	pop    %r13
  400f1f:	41 5e                	pop    %r14
  400f21:	41 5f                	pop    %r15
  400f23:	5d                   	pop    %rbp
  400f24:	c3                   	retq   
  400f25:	0f 1f 00             	nopl   (%rax)

	starttime1 = getrusage_sec();
	for(i=0;i<HEIGHT;i++){
		for(j=0;j<WIDTH;j++){
			for(k=0;k<points;k++){
          			img_buf[i*WIDTH+j]=img_buf[i*WIDTH+j]+cos(sum*sqrt((j-x[k])*(j-x[k])+(i-y[k])*(i-y[k])+z[k]*z[k]));
  400f28:	66 0f 28 c1          	movapd %xmm1,%xmm0
  400f2c:	e8 4f f9 ff ff       	callq  400880 <sqrt@plt>
  400f31:	8b 85 e0 fa ff ff    	mov    -0x520(%rbp),%eax
  400f37:	89 85 d4 fa ff ff    	mov    %eax,-0x52c(%rbp)
  400f3d:	e9 8b fd ff ff       	jmpq   400ccd <main+0x42d>
	free(img);
	free(img_buf);
	fclose(fp1);

	return 0;
}
  400f42:	e8 a9 f8 ff ff       	callq  4007f0 <__stack_chk_fail@plt>
  400f47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  400f4e:	00 00 

0000000000400f50 <_start>:
  400f50:	31 ed                	xor    %ebp,%ebp
  400f52:	49 89 d1             	mov    %rdx,%r9
  400f55:	5e                   	pop    %rsi
  400f56:	48 89 e2             	mov    %rsp,%rdx
  400f59:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  400f5d:	50                   	push   %rax
  400f5e:	54                   	push   %rsp
  400f5f:	49 c7 c0 30 11 40 00 	mov    $0x401130,%r8
  400f66:	48 c7 c1 c0 10 40 00 	mov    $0x4010c0,%rcx
  400f6d:	48 c7 c7 a0 08 40 00 	mov    $0x4008a0,%rdi
  400f74:	e8 97 f8 ff ff       	callq  400810 <__libc_start_main@plt>
  400f79:	f4                   	hlt    
  400f7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400f80 <deregister_tm_clones>:
  400f80:	b8 9f 20 60 00       	mov    $0x60209f,%eax
  400f85:	55                   	push   %rbp
  400f86:	48 2d 98 20 60 00    	sub    $0x602098,%rax
  400f8c:	48 83 f8 0e          	cmp    $0xe,%rax
  400f90:	48 89 e5             	mov    %rsp,%rbp
  400f93:	76 1b                	jbe    400fb0 <deregister_tm_clones+0x30>
  400f95:	b8 00 00 00 00       	mov    $0x0,%eax
  400f9a:	48 85 c0             	test   %rax,%rax
  400f9d:	74 11                	je     400fb0 <deregister_tm_clones+0x30>
  400f9f:	5d                   	pop    %rbp
  400fa0:	bf 98 20 60 00       	mov    $0x602098,%edi
  400fa5:	ff e0                	jmpq   *%rax
  400fa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  400fae:	00 00 
  400fb0:	5d                   	pop    %rbp
  400fb1:	c3                   	retq   
  400fb2:	0f 1f 40 00          	nopl   0x0(%rax)
  400fb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400fbd:	00 00 00 

0000000000400fc0 <register_tm_clones>:
  400fc0:	be 98 20 60 00       	mov    $0x602098,%esi
  400fc5:	55                   	push   %rbp
  400fc6:	48 81 ee 98 20 60 00 	sub    $0x602098,%rsi
  400fcd:	48 c1 fe 03          	sar    $0x3,%rsi
  400fd1:	48 89 e5             	mov    %rsp,%rbp
  400fd4:	48 89 f0             	mov    %rsi,%rax
  400fd7:	48 c1 e8 3f          	shr    $0x3f,%rax
  400fdb:	48 01 c6             	add    %rax,%rsi
  400fde:	48 d1 fe             	sar    %rsi
  400fe1:	74 15                	je     400ff8 <register_tm_clones+0x38>
  400fe3:	b8 00 00 00 00       	mov    $0x0,%eax
  400fe8:	48 85 c0             	test   %rax,%rax
  400feb:	74 0b                	je     400ff8 <register_tm_clones+0x38>
  400fed:	5d                   	pop    %rbp
  400fee:	bf 98 20 60 00       	mov    $0x602098,%edi
  400ff3:	ff e0                	jmpq   *%rax
  400ff5:	0f 1f 00             	nopl   (%rax)
  400ff8:	5d                   	pop    %rbp
  400ff9:	c3                   	retq   
  400ffa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401000 <__do_global_dtors_aux>:
  401000:	80 3d 91 10 20 00 00 	cmpb   $0x0,0x201091(%rip)        # 602098 <__TMC_END__>
  401007:	75 11                	jne    40101a <__do_global_dtors_aux+0x1a>
  401009:	55                   	push   %rbp
  40100a:	48 89 e5             	mov    %rsp,%rbp
  40100d:	e8 6e ff ff ff       	callq  400f80 <deregister_tm_clones>
  401012:	5d                   	pop    %rbp
  401013:	c6 05 7e 10 20 00 01 	movb   $0x1,0x20107e(%rip)        # 602098 <__TMC_END__>
  40101a:	f3 c3                	repz retq 
  40101c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401020 <frame_dummy>:
  401020:	bf 10 1e 60 00       	mov    $0x601e10,%edi
  401025:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  401029:	75 05                	jne    401030 <frame_dummy+0x10>
  40102b:	eb 93                	jmp    400fc0 <register_tm_clones>
  40102d:	0f 1f 00             	nopl   (%rax)
  401030:	b8 00 00 00 00       	mov    $0x0,%eax
  401035:	48 85 c0             	test   %rax,%rax
  401038:	74 f1                	je     40102b <frame_dummy+0xb>
  40103a:	55                   	push   %rbp
  40103b:	48 89 e5             	mov    %rsp,%rbp
  40103e:	ff d0                	callq  *%rax
  401040:	5d                   	pop    %rbp
  401041:	e9 7a ff ff ff       	jmpq   400fc0 <register_tm_clones>
  401046:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40104d:	00 00 00 

0000000000401050 <getrusage_sec>:
	RGBQUAD          bmiColors[1];
}BITMAPINFO;


float getrusage_sec()
{
  401050:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
	struct rusage t;
	struct timeval tv;

	getrusage(RUSAGE_SELF,&t);
  401057:	31 ff                	xor    %edi,%edi
  401059:	48 89 e6             	mov    %rsp,%rsi
	RGBQUAD          bmiColors[1];
}BITMAPINFO;


float getrusage_sec()
{
  40105c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  401063:	00 00 
  401065:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  40106c:	00 
  40106d:	31 c0                	xor    %eax,%eax
	struct rusage t;
	struct timeval tv;

	getrusage(RUSAGE_SELF,&t);
  40106f:	e8 ec f7 ff ff       	callq  400860 <getrusage@plt>
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
  401074:	66 0f ef c0          	pxor   %xmm0,%xmm0
  401078:	66 0f ef c9          	pxor   %xmm1,%xmm1
}
  40107c:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  401083:	00 
  401084:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  40108b:	00 00 
	struct timeval tv;

	getrusage(RUSAGE_SELF,&t);
	tv = t.ru_utime;

	return tv.tv_sec + (float)tv.tv_usec*1e-6;
  40108d:	f3 48 0f 2a 44 24 08 	cvtsi2ssq 0x8(%rsp),%xmm0
  401094:	f2 48 0f 2a 0c 24    	cvtsi2sdq (%rsp),%xmm1
  40109a:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  40109e:	f2 0f 59 05 1a 01 00 	mulsd  0x11a(%rip),%xmm0        # 4011c0 <_IO_stdin_used+0x80>
  4010a5:	00 
  4010a6:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
}
  4010aa:	75 0c                	jne    4010b8 <getrusage_sec+0x68>
  4010ac:	f2 0f 5a c0          	cvtsd2ss %xmm0,%xmm0
  4010b0:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  4010b7:	c3                   	retq   
  4010b8:	e8 33 f7 ff ff       	callq  4007f0 <__stack_chk_fail@plt>
  4010bd:	0f 1f 00             	nopl   (%rax)

00000000004010c0 <__libc_csu_init>:
  4010c0:	41 57                	push   %r15
  4010c2:	41 56                	push   %r14
  4010c4:	41 89 ff             	mov    %edi,%r15d
  4010c7:	41 55                	push   %r13
  4010c9:	41 54                	push   %r12
  4010cb:	4c 8d 25 2e 0d 20 00 	lea    0x200d2e(%rip),%r12        # 601e00 <__frame_dummy_init_array_entry>
  4010d2:	55                   	push   %rbp
  4010d3:	48 8d 2d 2e 0d 20 00 	lea    0x200d2e(%rip),%rbp        # 601e08 <__init_array_end>
  4010da:	53                   	push   %rbx
  4010db:	49 89 f6             	mov    %rsi,%r14
  4010de:	49 89 d5             	mov    %rdx,%r13
  4010e1:	4c 29 e5             	sub    %r12,%rbp
  4010e4:	48 83 ec 08          	sub    $0x8,%rsp
  4010e8:	48 c1 fd 03          	sar    $0x3,%rbp
  4010ec:	e8 87 f6 ff ff       	callq  400778 <_init>
  4010f1:	48 85 ed             	test   %rbp,%rbp
  4010f4:	74 20                	je     401116 <__libc_csu_init+0x56>
  4010f6:	31 db                	xor    %ebx,%ebx
  4010f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4010ff:	00 
  401100:	4c 89 ea             	mov    %r13,%rdx
  401103:	4c 89 f6             	mov    %r14,%rsi
  401106:	44 89 ff             	mov    %r15d,%edi
  401109:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40110d:	48 83 c3 01          	add    $0x1,%rbx
  401111:	48 39 eb             	cmp    %rbp,%rbx
  401114:	75 ea                	jne    401100 <__libc_csu_init+0x40>
  401116:	48 83 c4 08          	add    $0x8,%rsp
  40111a:	5b                   	pop    %rbx
  40111b:	5d                   	pop    %rbp
  40111c:	41 5c                	pop    %r12
  40111e:	41 5d                	pop    %r13
  401120:	41 5e                	pop    %r14
  401122:	41 5f                	pop    %r15
  401124:	c3                   	retq   
  401125:	90                   	nop
  401126:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40112d:	00 00 00 

0000000000401130 <__libc_csu_fini>:
  401130:	f3 c3                	repz retq 

セクション .fini の逆アセンブル:

0000000000401134 <_fini>:
  401134:	48 83 ec 08          	sub    $0x8,%rsp
  401138:	48 83 c4 08          	add    $0x8,%rsp
  40113c:	c3                   	retq   
